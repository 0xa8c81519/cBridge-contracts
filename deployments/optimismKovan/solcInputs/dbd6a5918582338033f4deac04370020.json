{
  "language": "Solidity",
  "sources": {
    "contracts/CBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./libraries/SafeERC20.sol\";\n\ncontract CBridge {\n    using SafeERC20 for IERC20;\n\n    enum TransferStatus {\n        Null,\n        Pending,\n        Confirmed,\n        Refunded\n    }\n    struct Transfer {\n        address sender;\n        address receiver;\n        address token;\n        uint256 amount;\n        bytes32 hashlock; // hash of the preimage\n        uint64 timelock; // UNIX timestamp seconds - locked UNTIL this time\n        TransferStatus status;\n    }\n\n    mapping(bytes32 => Transfer) public transfers;\n\n    event LogNewTransferOut(\n        bytes32 transferId,\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount,\n        bytes32 hashlock, // hash of the preimage\n        uint64 timelock, // UNIX timestamp seconds - locked UNTIL this time\n        uint64 dstChainId,\n        address dstAddress\n    );\n    event LogNewTransferIn(\n        bytes32 transferId,\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount,\n        bytes32 hashlock, // hash of the preimage\n        uint64 timelock, // UNIX timestamp seconds - locked UNTIL this time\n        uint64 srcChainId,\n        bytes32 srcTransferId // outbound transferId at src chain\n    );\n    event LogTransferConfirmed(bytes32 transferId, bytes32 preimage);\n    event LogTransferRefunded(bytes32 transferId);\n\n    /**\n     * @dev transfer sets up a new outbound transfer with hash time lock.\n     */\n    function transferOut(\n        address _bridge,\n        address _token,\n        uint256 _amount,\n        bytes32 _hashlock,\n        uint64 _timelock,\n        uint64 _dstChainId,\n        address _dstAddress\n    ) external {\n        bytes32 transferId = _transfer(_bridge, _token, _amount, _hashlock, _timelock);\n        emit LogNewTransferOut(\n            transferId,\n            msg.sender,\n            _bridge,\n            _token,\n            _amount,\n            _hashlock,\n            _timelock,\n            _dstChainId,\n            _dstAddress\n        );\n    }\n\n    /**\n     * @dev transfer sets up a new inbound transfer with hash time lock.\n     */\n    function transferIn(\n        address _dstAddress,\n        address _token,\n        uint256 _amount,\n        bytes32 _hashlock,\n        uint64 _timelock,\n        uint64 _srcChainId,\n        bytes32 _srcTransferId\n    ) external {\n        bytes32 transferId = _transfer(_dstAddress, _token, _amount, _hashlock, _timelock);\n        emit LogNewTransferIn(\n            transferId,\n            msg.sender,\n            _dstAddress,\n            _token,\n            _amount,\n            _hashlock,\n            _timelock,\n            _srcChainId,\n            _srcTransferId\n        );\n    }\n\n    /**\n     * @dev confirm a transfer.\n     *\n     * @param _transferId Id of pending transfer.\n     * @param _preimage key for the hashlock\n     */\n    function confirm(bytes32 _transferId, bytes32 _preimage) external {\n        Transfer memory t = transfers[_transferId];\n\n        require(t.status == TransferStatus.Pending, \"not pending transfer\");\n        require(t.hashlock == keccak256(abi.encodePacked(_preimage)), \"incorrect preimage\");\n\n        transfers[_transferId].status = TransferStatus.Confirmed;\n\n        IERC20(t.token).safeTransfer(t.receiver, t.amount);\n        emit LogTransferConfirmed(_transferId, _preimage);\n    }\n\n    /**\n     * @dev refund a transfer after timeout.\n     *\n     * @param _transferId Id of pending transfer.\n     */\n    function refund(bytes32 _transferId) external {\n        Transfer memory t = transfers[_transferId];\n\n        require(t.status == TransferStatus.Pending, \"not pending transfer\");\n        require(t.timelock <= block.timestamp, \"timelock not yet passed\");\n\n        transfers[_transferId].status = TransferStatus.Refunded;\n\n        IERC20(t.token).safeTransfer(t.sender, t.amount);\n        emit LogTransferRefunded(_transferId);\n    }\n\n    /**\n     * @dev transfer sets up a new transfer with hash time lock.\n     */\n    function _transfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        bytes32 _hashlock,\n        uint64 _timelock\n    ) private returns (bytes32 transferId) {\n        require(_amount > 0, \"invalid amount\");\n        require(_timelock > block.timestamp, \"invalid timelock\");\n\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        transferId = keccak256(abi.encodePacked(msg.sender, _receiver, _hashlock, chainId));\n        require(transfers[transferId].status == TransferStatus.Null, \"transfer exists\");\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        transfers[transferId] = Transfer(\n            msg.sender,\n            _receiver,\n            _token,\n            _amount,\n            _hashlock,\n            _timelock,\n            TransferStatus.Pending\n        );\n        return transferId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERC20 operation did not succeed\");\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ERC20 operation did not succeed\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}